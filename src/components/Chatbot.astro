---
import { getChatbotResponse } from '../utils/gemini'
const initialMessageRaw = await getChatbotResponse('Say hello to our blog visitors!')
const initialMessage = initialMessageRaw.replace(/! /g, '!<br />') // Ngắt câu sau dấu chấm than
---

<div class='chatbot-wrapper fixed bottom-6 right-6 z-50'>
	<button
		class='chatbot-toggle-open hidden p-3 bg-blue-500 dark:bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-600 dark:hover:bg-blue-700 transition-colors'
		title='Open Chatbot'
	>
		💬
	</button>
	<div
		class='chatbot hidden w-80 bg-white dark:bg-gray-900 shadow-lg rounded-lg p-4 transition-all duration-300'
	>
		<div class='flex justify-between items-center mb-3'>
			<div class='chat-header font-bold text-base text-gray-900 dark:text-gray-100'>Chatbot</div>
			<button
				class='chatbot-toggle-close p-1 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors'
				title='Close Chatbot'
			>
				✕
			</button>
		</div>
		<div class='chat-messages h-64 overflow-y-auto mb-3 flex flex-col'>
			<div class='message bot-message self-start max-w-[80%] mb-2'>
				<div class='label text-xs font-semibold text-gray-600 dark:text-gray-400 mb-1'>Bot</div>
				<div
					class='content p-2 bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 rounded-lg font-medium'
					set:html={initialMessage}
				/>
			</div>
		</div>
		<form id='chat-form' class='flex items-center gap-2'>
			<input
				type='text'
				id='chat-input'
				class='flex-1 py-1 px-2 text-sm border border-blue-200 dark:border-blue-800 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-300 dark:focus:ring-blue-700'
				placeholder='Ask me anything...'
			/>
			<button
				type='submit'
				class='px-4 py-2 bg-white dark:bg-gray-800 text-blue-500 dark:text-blue-400 border border-blue-200 dark:border-blue-800 rounded-full hover:bg-blue-50 dark:hover:bg-blue-900 transition-colors'
				>Send</button
			>
		</form>
	</div>
</div>

<script>
	const chatbotWrapper = document.querySelector('.chatbot-wrapper')
	const chatbot = document.querySelector('.chatbot')
	const toggleOpen = document.querySelector('.chatbot-toggle-open')
	const toggleClose = document.querySelector('.chatbot-toggle-close')
	const form = document.getElementById('chat-form')
	const input = document.getElementById('chat-input')
	const messages = document.querySelector('.chat-messages')

	// Initially show the chatbot and hide the open button
	chatbot.classList.remove('hidden')
	toggleOpen.classList.add('hidden')

	// Toggle chatbot visibility
	toggleOpen.addEventListener('click', () => {
		chatbot.classList.remove('hidden')
		toggleOpen.classList.add('hidden')
	})

	toggleClose.addEventListener('click', () => {
		chatbot.classList.add('hidden')
		toggleOpen.classList.remove('hidden')
	})

	// Chat form submission
	form.addEventListener('submit', async (e) => {
		e.preventDefault()
		const userMessage = input.value.trim()
		if (!userMessage) return

		// Display user message
		const userDiv = document.createElement('div')
		userDiv.className = 'message user-message self-end max-w-[80%] mb-2'
		userDiv.innerHTML = `
      <div class="label text-xs font-semibold text-gray-600 dark:text-gray-400 mb-1 text-right">You</div>
      <div class="content p-2 bg-blue-200 dark:bg-blue-800 text-gray-800 dark:text-gray-200 rounded-lg">${userMessage}</div>
    `
		messages.appendChild(userDiv)

		// Call Gemini API
		const response = await fetch('/api/chat', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ prompt: userMessage })
		})
		const data = await response.json()

		// Format bot response with breaks
		const formattedResponse = data.response.replace(/! /g, '!<br />').replace(/\. /g, '.<br />')

		// Display bot response
		const botDiv = document.createElement('div')
		botDiv.className = 'message bot-message self-start max-w-[80%] mb-2'
		botDiv.innerHTML = `
      <div class="label text-xs font-semibold text-gray-600 dark:text-gray-400 mb-1">Bot</div>
      <div class="content p-2 bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 rounded-lg font-medium" style="white-space: pre-wrap;">${formattedResponse}</div>
    `
		messages.appendChild(botDiv)

		// Clear input and scroll to bottom
		input.value = ''
		messages.scrollTop = messages.scrollHeight
	})
</script>

<!-- ---
// Không cần import và gọi getChatbotResponse ở đây nữa
---

<div class='chatbot-wrapper fixed bottom-6 right-6 z-50'>
    <button
        class='chatbot-toggle-open hidden p-3 bg-blue-500 dark:bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-600 dark:hover:bg-blue-700 transition-colors'
        title='Open Chatbot'
    >
        💬
    </button>
    <div
        class='chatbot hidden w-80 bg-white dark:bg-gray-900 shadow-lg rounded-lg p-4 transition-all duration-300'
    >
        <div class='flex justify-between items-center mb-3'>
            <div class='chat-header font-bold text-base text-gray-900 dark:text-gray-100'>Chatbot</div>
            <button
                class='chatbot-toggle-close p-1 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors'
                title='Close Chatbot'
            >
                ✕
            </button>
        </div>
        <div id="chat-messages" class='chat-messages h-64 overflow-y-auto mb-3 flex flex-col'>
            </div>
        <form id='chat-form' class='flex items-center gap-2'>
            <input
                type='text'
                id='chat-input'
                class='flex-1 py-1 px-2 text-sm border border-blue-200 dark:border-blue-800 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-300 dark:focus:ring-blue-700'
                placeholder='Ask me anything...'
            />
            <button
                type='submit'
                class='px-4 py-2 bg-white dark:bg-gray-800 text-blue-500 dark:text-blue-400 border border-blue-200 dark:border-blue-800 rounded-full hover:bg-blue-50 dark:hover:bg-blue-900 transition-colors'
                >Send</button
            >
        </form>
    </div>
</div>

<script>
    const chatbotWrapper = document.querySelector('.chatbot-wrapper')
    const chatbot = document.querySelector('.chatbot')
    const toggleOpen = document.querySelector('.chatbot-toggle-open')
    const toggleClose = document.querySelector('.chatbot-toggle-close')
    const form = document.getElementById('chat-form')
    const input = document.getElementById('chat-input')
    const messages = document.getElementById('chat-messages') // Lấy element bằng ID

    // Initially show the chatbot and hide the open button
    chatbot.classList.remove('hidden')
    toggleOpen.classList.add('hidden')

    // Toggle chatbot visibility
    toggleOpen.addEventListener('click', () => {
        chatbot.classList.remove('hidden')
        toggleOpen.classList.add('hidden')
    })

    toggleClose.addEventListener('click', () => {
        chatbot.classList.add('hidden')
        toggleOpen.classList.remove('hidden')
    })

    // Function to display a message
    function displayMessage(text, sender = 'bot') {
        const messageDiv = document.createElement('div')
        messageDiv.className = `message ${sender}-message self-${sender === 'bot' ? 'start' : 'end'} max-w-[80%] mb-2`
        messageDiv.innerHTML = `
            <div class="label text-xs font-semibold text-gray-600 dark:text-gray-400 mb-1 text-${sender === 'bot' ? 'left' : 'right'}">${sender === 'bot' ? 'Bot' : 'You'}</div>
            <div class="content p-2 bg-${sender === 'bot' ? 'gray-100 dark:bg-gray-800' : 'blue-200 dark:bg-blue-800'} text-gray-800 dark:text-gray-200 rounded-lg font-medium" style="white-space: pre-wrap;">${text.replace(/! /g, '!<br />').replace(/\. /g, '.<br />')}</div>
        `
        messages.appendChild(messageDiv)
        messages.scrollTop = messages.scrollHeight
    }

    // Get initial bot message when the component loads
    async function getInitialBotMessage() {
        try {
            const response = await fetch('/.netlify/functions/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: 'Say hello to our blog visitors!' })
            })
            const data = await response.json()
            if (data && data.response) {
                displayMessage(data.response, 'bot')
            } else {
                displayMessage('Hello!', 'bot') // Fallback message
            }
        } catch (error) {
            console.error('Error fetching initial bot message:', error)
            displayMessage('Sorry, I am unable to say hello right now.', 'bot') // Fallback error message
        }
    }

    getInitialBotMessage()

    // Chat form submission
    form.addEventListener('submit', async (e) => {
        e.preventDefault()
        const userMessage = input.value.trim()
        if (!userMessage) return

        displayMessage(userMessage, 'user')
        input.value = '' // Clear input immediately after sending

        // Call Netlify Function for user's message
        try {
            const response = await fetch('/.netlify/functions/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: userMessage })
            })
            const data = await response.json()
            if (data && data.response) {
                displayMessage(data.response, 'bot')
            } else {
                displayMessage('Sorry, I did not receive a response.', 'bot') // Fallback
            }
        } catch (error) {
            console.error('Error calling chat function:', error)
            displayMessage('Sorry, I encountered an error.', 'bot') // Fallback error message
        }
    })
</script> -->
